{"version":3,"sources":["components/ThemeToggle.module.css","components/Key.module.css","components/Display.module.css","App.module.css","components/Header.module.css","components/Keypad.module.css","components/ThemeContext.js","components/ThemeToggle.js","components/Header.js","components/DisplayContext.js","components/Display.js","helper/calc_helper.js","components/Key.js","components/Keypad.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ThemeContext","React","createContext","theme","setTheme","ThemeToggle","props","useContext","dotPosition","changeTheme","current_theme","func","classes","dot_1to2","dot_2to3","className","ToggleSwitch","SwitchLabel","role","switchContainer","onClick","ToggleLabel","id","dot","Header","header","DisplayContext","display","setDisplay","Display","result","console","log","DisplayContainer","DisplayOutput","operation","first_operand","current_operation","lastKeyPressedOp","handleNumKeyPress","key_text","test","resetForSecondOperand","length","removeCommasInNumbers","concat","substring","indexOf","second_operand","executeMathOp","toString","number","parseFloat","toExponential","formatScientificNotation","x","regexp","numArray","split","replace","join","formatNumberWithCommas","replaceAll","Key","keyStyle","text","equalKeyStyle","delKeyStyle","resetKeyStyle","regularKeyStyle","type","Keypad","keypadContainer","App","useState","value","displayValue","useEffect","document","getElementById","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc3417e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToggleSwitch\":\"ThemeToggle_ToggleSwitch__6-MRf\",\"switchContainer\":\"ThemeToggle_switchContainer__YDXKZ\",\"SwitchLabel\":\"ThemeToggle_SwitchLabel__XQ5Od\",\"ToggleLabel\":\"ThemeToggle_ToggleLabel__U4vHi\",\"dot\":\"ThemeToggle_dot__1SBgd\",\"dot_1to2\":\"ThemeToggle_dot_1to2__300kP\",\"dot_2to3\":\"ThemeToggle_dot_2to3__32SAq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regularKeyStyle\":\"Key_regularKeyStyle__1PYgg\",\"delKeyStyle\":\"Key_delKeyStyle__IBpo7\",\"resetKeyStyle\":\"Key_resetKeyStyle__hcsqs\",\"equalKeyStyle\":\"Key_equalKeyStyle__3Itpm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayContainer\":\"Display_DisplayContainer__2pNhW\",\"DisplayOutput\":\"Display_DisplayOutput__30zyT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__eK59c\",\"App-container\":\"App_App-container__2_rhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1SXbh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"keypadContainer\":\"Keypad_keypadContainer__2I3zd\"};","import React from \"react\";\r\n\r\nconst ThemeContext = React.createContext({\r\n  theme: \"theme1\",\r\n  setTheme: () => {},\r\n});\r\n\r\nexport default ThemeContext;\r\n","import React, { useContext } from \"react\";\r\nimport ThemeContext from \"./ThemeContext\";\r\n\r\nimport classes from \"./ThemeToggle.module.css\";\r\n\r\nconst ThemeToggle = (props) => {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n  var dotPosition = \"\";\r\n\r\n  const onClickHandler = () => {\r\n    changeTheme(theme, setTheme);\r\n  };\r\n  /*\r\n  const onKeyDownHandler = (event) => {\r\n    if (event.key === \"t\") {\r\n      changeTheme(theme);\r\n    }\r\n  };\r\n*/\r\n  const changeTheme = (current_theme, func, dotPosition) => {\r\n    let style = \"\";\r\n    if (current_theme === \"theme1\") {\r\n      func(\"theme2\");\r\n    } else if (current_theme === \"theme2\") {\r\n      func(\"theme3\");\r\n    } else {\r\n      func(\"theme1\");\r\n    }\r\n    return style;\r\n  };\r\n\r\n  if (theme === \"theme1\") {\r\n    dotPosition = \"\";\r\n  } else if (theme === \"theme2\") {\r\n    dotPosition = classes.dot_1to2;\r\n  } else {\r\n    dotPosition = classes.dot_2to3;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.ToggleSwitch}>\r\n      <span className={classes.SwitchLabel}>THEME</span>\r\n      <div\r\n        role=\"button\"\r\n        className={`${theme} ${classes.switchContainer}`}\r\n        onClick={onClickHandler}\r\n      >\r\n        <span className={` ${theme} ${classes.ToggleLabel}`}>1 2 3</span>\r\n        <div id=\"dot\" className={`${theme} ${classes.dot} ${dotPosition}`} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","import React, { useContext } from \"react\";\r\nimport ThemeToggle from \"./ThemeToggle\";\r\n\r\nimport classes from \"./Header.module.css\";\r\nimport ThemeContext from \"./ThemeContext\";\r\n\r\nconst Header = (props) => {\r\n  const { theme } = useContext(ThemeContext);\r\n  \r\n  return (\r\n    <div className={`${theme} ${classes.header}`}>\r\n      <h1>calc</h1>\r\n      <ThemeToggle />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst DisplayContext = React.createContext({\r\n  display: \"0\",\r\n  setDisplay: () => {},\r\n});\r\n\r\nexport default DisplayContext;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport classes from \"./Display.module.css\";\r\nimport DisplayContext from \"./DisplayContext\";\r\nimport ThemeContext from \"./ThemeContext\";\r\n\r\nexport const MAX_DISPLAY_LENGTH = 11;\r\n\r\nconst Display = (props) => {\r\n  const { theme } = useContext(ThemeContext);\r\n  const { display } = useContext(DisplayContext);\r\n\r\n  if (props.result === null) {\r\n    props.result = 0;\r\n  }\r\n\r\n  console.log(\"Display display: \" + display);\r\n\r\n  return (\r\n    <div className={`${theme} ${classes.DisplayContainer}`}>\r\n      <span className={`${theme} ${classes.DisplayOutput}`}>{display}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","/* calc_helper.js                               */\r\n/* Helper function for calculator operations    */\r\nimport { MAX_DISPLAY_LENGTH } from \"../components/Display\";\r\n\r\nvar operation = {\r\n  first_operand: \"\",\r\n  current_operation: \"\",\r\n};\r\n\r\nvar lastKeyPressedOp = false; /** flag for operation key press, TRUE when last key pressed was +, -, /, x */\r\n\r\n/**\r\n * handleNumKeyPress\r\n * @description Handler of numkey press\r\n * @param key_text  Text content of key that was pressed\r\n * @param display   Display in calculator\r\n * @returns\r\n */\r\nexport const handleNumKeyPress = (key_text, display) => {\r\n  let numPattern = /[0-9]/; // match numeric key\r\n  let result = \"\";\r\n\r\n  if (numPattern.test(key_text) === true) {\r\n    // if last key pressed before was operator, reset display\r\n    display = resetForSecondOperand(display);\r\n\r\n    if (display.length !== MAX_DISPLAY_LENGTH) {\r\n      // remove all commas\r\n      display = removeCommasInNumbers(display);\r\n\r\n      if (display.length === 1 && display === \"0\") {\r\n        // if display is 0 and length is 1, replace with calc button pressed\r\n        result = key_text;\r\n      } else {\r\n        result = display.concat(key_text);\r\n      }\r\n    } else {\r\n      // ignore button press and just show current display\r\n      result = display;\r\n    }\r\n  } else if (key_text === \"reset\") {\r\n    // clear all, back to zero\r\n    result = \"0\";\r\n    lastKeyPressedOp = false;\r\n  } else if (key_text === \"del\") {\r\n    // chceck if operator key was pressed and reset if needed\r\n    display = resetForSecondOperand(display);\r\n\r\n    // remove commas\r\n    display = removeCommasInNumbers(display);\r\n\r\n    // remove last character in display\r\n    result = display.substring(0, display.length - 1);\r\n    if (result.length === 0) {\r\n      result = \"0\";\r\n    }\r\n  } else if (key_text === \".\") {\r\n    display = resetForSecondOperand(display);\r\n\r\n    // remove commas\r\n    display = removeCommasInNumbers(display);\r\n\r\n    // ignore second \".\"\r\n    const index = display.indexOf(\".\");\r\n    if (index < 0) {\r\n      if (display.length !== MAX_DISPLAY_LENGTH) {\r\n        result = display.concat(key_text);\r\n      } else {\r\n        result = display;\r\n      }\r\n    }\r\n  } else if (key_text === \"=\") {\r\n    // remove commas\r\n    display = removeCommasInNumbers(display);\r\n\r\n    // execute operation\r\n    result = executeMathOp(\r\n      operation.current_operation,\r\n      +operation.first_operand,\r\n      +display\r\n    );\r\n\r\n    result = result.toString();\r\n    console.log(\"handleNumKeyPress key_text= result: \" + result);\r\n\r\n    if (result.length > MAX_DISPLAY_LENGTH) {\r\n      // use scientific notation if exceeds display length\r\n      result = formatScientificNotation(result);\r\n    }\r\n  } else {\r\n    // store display value into object\r\n    operation.first_operand = removeCommasInNumbers(display);\r\n    operation.current_operation = key_text;\r\n\r\n    result = display;\r\n\r\n    // update flag\r\n    lastKeyPressedOp = true;\r\n  }\r\n\r\n  // add commmas to final result\r\n  return formatNumberWithCommas(result);\r\n};\r\n\r\n/**\r\n * formatNumberWithCommas\r\n * @description Add commas to number string every 1000\r\n * @param {*} x Number string\r\n * @returns     Number string formatted with comma\r\n */\r\nfunction formatNumberWithCommas(x) {\r\n  const regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n  let result = \"\";\r\n\r\n  // split if num is decimal\r\n  let numArray = x.split(\".\");\r\n  numArray[0] = numArray[0].replace(regexp, \",\");\r\n\r\n  // join\r\n  result = numArray.join(\".\");\r\n  console.log(result);\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * removeCommasInNumbers\r\n * @description Remove commas in number string\r\n * @param x Number string\r\n * @returns Number string with removed commas\r\n */\r\nfunction removeCommasInNumbers(x) {\r\n  return x.replaceAll(\",\", \"\");\r\n}\r\n\r\n/**\r\n * resetForSecondOperand\r\n * @description Checks if this is the second operand.  When it is second operand, display is reset to display it.\r\n * @param {*} display           Number of string to be displayed\r\n * @param {*} operator_key_flag Flag when second operator is pressed\r\n * @returns     Number string to be displayed\r\n */\r\nfunction resetForSecondOperand(display) {\r\n  let result = \"\";\r\n\r\n  if (true === lastKeyPressedOp) {\r\n    // refresh display for 2nd operand\r\n    result = \"0\";\r\n\r\n    // reset the flag\r\n    lastKeyPressedOp = false;\r\n  } else {\r\n    result = display;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * executeMathOp()\r\n * @description Execution of math operations\r\n * @param {*} operation         Mathematical operation to be performed\r\n * @param {*} first_operand     first number in operation\r\n * @param {*} second_operand    second number in operation\r\n * @returns\r\n */\r\nfunction executeMathOp(operation, first_operand, second_operand) {\r\n  let result = 0;\r\n\r\n  console.log(\"executeMathOp operation: \" + operation);\r\n  console.log(\"executeMathOp first_operand: \" + first_operand);\r\n  console.log(\"executeMathOp second_operand: \" + second_operand);\r\n\r\n  switch (operation) {\r\n    case \"+\":\r\n      result = first_operand + second_operand;\r\n      break;\r\n    case \"-\":\r\n      result = first_operand - second_operand;\r\n      break;\r\n    case \"x\":\r\n      result = first_operand * second_operand;\r\n      break;\r\n    case \"/\":\r\n      if (second_operand === \"0\") {\r\n        // handle divide by 0\r\n        result = \"E\";\r\n      } else {\r\n        result = first_operand / second_operand;\r\n      }\r\n      break;\r\n    default:\r\n      result = second_operand;\r\n  }\r\n\r\n  console.log(\"executeMathOp result: \" + result);\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * formatScientificNotation\r\n * @description Format number to scientific notation\r\n * @param {*} number    Source number\r\n * @returns             Number formatted to scientific notation\r\n */\r\nfunction formatScientificNotation(number) {\r\n  let result = 0;\r\n  result = parseFloat(number).toExponential(5);\r\n  console.log(\"result after exp: \" + result);\r\n  result = result.toString();\r\n  return result;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { handleNumKeyPress } from \"../helper/calc_helper\";\r\nimport DisplayContext from \"./DisplayContext\";\r\n\r\nimport classes from \"./Key.module.css\";\r\nimport ThemeContext from \"./ThemeContext\";\r\n\r\nconst Key = (props) => {\r\n  const { theme } = useContext(ThemeContext);\r\n  const { display, setDisplay } = useContext(DisplayContext);\r\n\r\n  const onClickHandler = () => {\r\n    console.log(\"Key onClickHandler display \" + display);\r\n    setDisplay(handleNumKeyPress(props.text, display));\r\n  };\r\n\r\n  let keyStyle = \"\";\r\n  if (props.text === \"=\") {\r\n    keyStyle = classes.equalKeyStyle;\r\n  } else if (props.text === \"del\") {\r\n    keyStyle = classes.delKeyStyle;\r\n  } else if (props.text === \"reset\") {\r\n    keyStyle = classes.resetKeyStyle;\r\n  } else {\r\n    keyStyle = classes.regularKeyStyle;\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"submit\"\r\n      className={`${theme} ${keyStyle}`}\r\n      onClick={onClickHandler}\r\n    >\r\n      {props.text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Key;\r\n","import React, {useContext} from \"react\";\r\nimport Key from \"./Key\";\r\n\r\nimport classes from \"./Keypad.module.css\";\r\nimport ThemeContext from \"./ThemeContext\";\r\n\r\nconst Keypad = () => {\r\n  const {theme} = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div className={`${theme} ${classes.keypadContainer}`}>\r\n      <Key text=\"7\" />\r\n      <Key text=\"8\" />\r\n      <Key text=\"9\" />\r\n      <Key text=\"del\" />\r\n      <Key text=\"4\" />\r\n      <Key text=\"5\" />\r\n      <Key text=\"6\" />\r\n      <Key text=\"+\" />\r\n      <Key text=\"1\" />\r\n      <Key text=\"2\" />\r\n      <Key text=\"3\" />\r\n      <Key text=\"-\" />\r\n      <Key text=\".\" />\r\n      <Key text=\"0\" />\r\n      <Key text=\"/\" />\r\n      <Key text=\"x\" />\r\n      <Key text=\"reset\" />\r\n      <Key text=\"=\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Keypad;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport classes from \"./App.module.css\";\nimport Header from \"./components/Header\";\nimport Display from \"./components/Display\";\nimport Keypad from \"./components/Keypad\";\nimport ThemeContext from \"./components/ThemeContext\";\nimport DisplayContext from \"./components/DisplayContext\";\n\nfunction App() {\n  /* color theme */\n  const [theme, setTheme] = useState(\"theme1\");\n  const value = { theme, setTheme };\n\n  /* calculator display */\n  const [display, setDisplay] = useState(\"0\");\n  const displayValue = { display, setDisplay };\n\n  /* update background color of parent when there is a change in theme */\n  useEffect(() => {\n    const root = document.getElementById(\"root\");\n    root.className = theme;\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <div className={`${theme} ${classes[\"App-container\"]}`}>\n        <Header />\n        <DisplayContext.Provider value={displayValue}>\n          <Display />\n          <Keypad />\n        </DisplayContext.Provider>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}